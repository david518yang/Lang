MODE {
	Program     = Stmt+
    Stmt        = VarDecl 
                | Assignment
                | Print
                | IfStmt
                | LoopStmt
                | BreakStmt
                | ClassDef
                | return ";"                            --shortReturn
                | return Exp ";"                        --return
    
    VarDecl     = auto id "=" Exp ";"
    Assignment  = Primary_id "=" Exp ";"
    Print       = print Exp ";"
    IfStmt      = if Exp Block else Block                 --long
                | if Exp Block else IfStmt                --elsif
                | if Exp Block                            --short
                | Ternary                                 --ternary
    LoopStmt    = WhileStmt | ForStmt
    WhileStmt   = while Exp Block
    ForStmt     = for id in Exp Block
    Block       = "{" Stmt+ "}"
    BreakStmt   = break ";"
    Ternary     = if "(" Exp ")" "yield" Exp "otherwise" Exp ";"
    Lambda      = "(" (id ",")* id ")" "->" Exp     --lambda
    ClassDef    = "class" id "{" Field* "}"         --classdef
    Field       = id ":" Type ";"
    Type        = Type "?"                          --optional
                | Type "[]"                         --arr
                | Lambda                            --lambda
                | id                                --classtype
                
    Exp         = Exp1 relop Exp1                   --comparison
                | Exp1
    Exp1        = Exp1 ("+" | "-") Term             --binary
                | Term
    Term        = Term ("*" | "/" | "%") Factor     --binary
                | Factor
    Factor      = Primary "**" Factor               --binary
                | "-" Primary                       --negation
                | Primary
    Primary     = id "(" ListOf<Exp, ","> ")"       --call
                | float                           --num
                | id                                --id
                | string ~mut                       --string
                | true ~mut                         --true
                | false ~mut                        --false
                | "(" Exp ")"                       --parens
    
    relop       = "<=" | "<" | "==" | "!=" | ">=" | ">"
    float       = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    string		= "\"" char* "\""
    char		= ~"\\" ~"\"" any							--normalchars
    			| "\\" ("'" | "\"" | "n" | "\\") 			--escape
    			| "\\u{" hex? hex? hex? hex? hex? hex? "}"	--hex
                | "%{"id"}"                                 --stringinterpolation
    hex			= hexDigit
    mut         = ~"==" "=" | "++" | "--"

    print       = "print" ~idchar
    auto        = "auto" ~idchar
    if          = "if" ~idchar
    else        = "else" ~idchar
    while       = "while" ~idchar
    for         = "for" ~idchar
    in          = "in" ~idchar
    break       = "break" ~idchar
    return      = "return" ~idchar
    true        = "true" ~idchar
    false       = "false" ~idchar
    keyword     = print | if | else | while | for | in | break | return | true | false | auto
    idchar      = letter | digit | "_"
    id          = ~keyword letter idchar*

    space       += "//" (~"\n" any)*               --comment
    
}