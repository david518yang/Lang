MODE {
	Program     = Stmt+
    Stmt        = VarDecl 
                | Assignment
                | FunDecl
                | Primary_call ";"                       --call
                | Print
                | IfStmt
                | LoopStmt
                | BreakStmt
                | ClassDef
                | return Exp ";"                        --return
                | return ";"                            --shortreturn
    
    VarDecl     = auto id "=" Exp ";"                   --inference
                | Type id "=" Exp ";"                   --type
    Assignment  = Primary_id "=" Exp ";"
    Print       = print Exp ";"
    IfStmt      = if Exp Block else Block                 --long
                | if Exp Block else IfStmt                --elsif
                | if Exp Block                            --short
    LoopStmt    = WhileStmt | ForStmt
    WhileStmt   = while Exp Block
    ForStmt     = for id in Exp Block                      --iterable
                | for id in Exp ".." Exp Block             --range
    Block       = "{" Stmt+ "}"
    BreakStmt   = break ";"
    Ternary     = if "(" Exp ")" yield Exp otherwise Exp
    Lambda      = "(" (id ",")* id ")" "->" Exp            --lambda
    ClassDef    = class id "{" Field* "}" ";"
    Field       = id ":" Type ";"
    FunDecl     = func id Params (":" Type)? Block
  	Params      = "(" ListOf<Param, ","> ")"
 	Param       = id ":" Type
    
    Type        = Type "[" "]"                       --arr
                | types                              --primitive
                | id                                 --id
    Exp         = Ternary
                | Exp0
    Exp0        = Exp1 relop Exp1                   --comparison
                | Exp1
    Exp1        = Exp1 ("+" | "-") Term             --binary
                | Term
    Term        = Term ("*" | "/" | "%") Factor     --binary
                | Factor
    Factor      = Primary "**" Factor               --binary
                | "-" Primary                       --negation
                | Primary
    Primary     = Primary_id "(" ListOf<Exp, ","> ")"      --call
                | float                             --num
                | int                               --int
                | Primary ("[" | "?[") Exp "]"      --subscript
                | Primary "." id                    --member
                | id                                --id
                | string ~mut                       --string
                | true ~mut                         --true
                | false ~mut                        --false
                | "(" Exp ")"                       --parens
                | Type_arr "(" ")" ~mut                    --emptyarray
                | "[" NonemptyListOf<Exp, ","> "]" ~mut      --arrayexp
    
    relop       = "<=" | "<" | "==" | "!=" | ">=" | ">"
    int         = digit+
    float        = digit+ ("." digit+) (("E" | "e") ("+" | "-")? digit+)?
    string		= "\"" char* "\""
    char		= ~"\\" ~"\"" any							--normalchars
    			| "\\" ("'" | "\"" | "n" | "\\") 			--escape
    			| "\\u{" hex? hex? hex? hex? hex? hex? "}"	--hex
                | "%{"id"}"                                 --stringinterpolation
    hex			= hexDigit
    mut         = ~"==" "=" | "++" | "--"

    print       = "print" ~idchar
    auto        = "auto" ~idchar
    func        = "func" ~idchar
    if          = "if" ~idchar
    else        = "else" ~idchar
    while       = "while" ~idchar
    for         = "for" ~idchar
    in          = "in" ~idchar
    break       = "break" ~idchar
    return      = "return" ~idchar
    class       = "class" ~idchar
    true        = "true" ~idchar
    yield       = "yield" ~idchar
    otherwise   = "otherwise" ~idchar
    false       = "false" ~idchar
    intkeyword  = "int" ~idchar
    floatkeyword = "float" ~idchar
    boolkeyword = "bool" ~idchar
    stringkeyword = "string" ~idchar
    anykeyword  = "any" ~idchar
    types       = intkeyword | floatkeyword | boolkeyword | stringkeyword | anykeyword
    keyword     = print | if | else | while | for | in | break | return | true | false | auto | func | class | yield | otherwise
                | types
    idchar      = letter | digit | "_"
    id          = ~keyword letter idchar*

    space       += "//" (~"\n" any)*               --comment
    
}